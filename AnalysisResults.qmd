---
title: "Power of Random Forests in Business"
subtitle: "Analysis & Results"
author: "Stutti (Advisor: Dr. Seals)"
date: '`r Sys.Date()`'
format:
  html:
    code-fold: true
course: Capstone Projects in Data Science
bibliography: references.bib # file contains bibtex for references
#always_allow_html: true # this allows to get PDF with HTML features
self-contained: true
execute: 
  warning: false
  message: false
editor: 
  markdown: 
    wrap: 72
---
# Analysis and Results

## SSI Sales Dataset {.smaller}

The source data contained sales transactions for a span of 48 months and came from SSI, a Florida based B2B2C type company. The company offers custom packaging in the food industry. It offers custom branding and design as well as actual supply of the products. Customers may have transactional based sales where each order serves as it’s own agreement or customers may have a long term contract where they agree to purchase a product or several products through the course of a six month period or a year, or agree to purchase a set quantity over a period of time, for example. Once these agreements are established, the customer instructs it’s distributor to purchase from SSI and deliver to them. So, the purchase order, in reality comes from this distributor and not the end client. The data extracted contains information on both the distributor as well as the end client. It also contains product information as well as delivery location. The SQL code used to extract this data is included in the Appendix. 

Below you will find the data dictionary of the SSI Sales data.

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-style:solid;border-width:0px;font-family:Arial, sans-serif;font-size:14px;overflow:hidden;
  padding:10px 5px;word-break:normal;}
.tg th{border-style:solid;border-width:0px;font-family:Arial, sans-serif;font-size:14px;font-weight:normal;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-m2gh{background-color:#FFF;border-color:#340096;color:#212529;font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-5ynp{background-color:#CFE2F3;border-color:#340096;font-weight:bold;text-align:center;vertical-align:top}
.tg .tg-mlwe{background-color:#212529;border-color:#340096;text-align:left;vertical-align:bottom}
.tg .tg-hznj{background-color:#0F9ED5;border-color:#340096;color:#FFF;font-weight:bold;text-align:left;vertical-align:top}
.tg .tg-prjj{border-color:#340096;color:#212529;text-align:left;vertical-align:bottom}
.tg .tg-w43o{background-color:#FFF;color:#212529;font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-jx9g{color:#212529;text-align:left;vertical-align:bottom}
</style>
<table class="tg"><thead>
  <tr>
    <th class="tg-5ynp" colspan="3"><span style="font-weight:bold;background-color:#CFE2F3">Data Dictionary</span></th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-mlwe" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-hznj"><span style="font-weight:bold;color:#FFF;background-color:#0F9ED5">Attribute</span></td>
    <td class="tg-hznj"><span style="font-weight:bold;color:#FFF;background-color:#0F9ED5">Format</span></td>
    <td class="tg-hznj"><span style="font-weight:bold;color:#FFF;background-color:#0F9ED5">Description</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">OPCO</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">The customer placing the order. In this case, typically a Distributor.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">SalesOrderID</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Unique identifier assigned to each sales order.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">CustomerPO</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Customer’s identifier of their order sent to BCC.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">Product</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Unique identifier assigned to each product.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">Description</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Description of the product being sold.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">Substrate</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Type of product/material.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">RequestedDeliveryDate</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Date the delivery was scheduled originally.</span></td>
  </tr>
  <tr>
    <td class="tg-m2gh"><span style="font-weight:bold;color:#212529;background-color:#FFF">DateFulfilled</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Date the delivery was made.</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">qtyOrdered</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Numeric</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Quantity ordered on the order.</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">qtyFulfilled</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Numeric</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Quantity delivered on the order.</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">UnitPrice</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Numeric</span></td>
    <td class="tg-prjj"><span style="font-weight:normal;color:#212529">Price of each case of product SSI charges the customer.</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">TotalPrice</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Numeric</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Total price of the sales order.</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">Class</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Customer name</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">ShipToName</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Address name of ordering party</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">ShipToAddress</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Address where order needs to be delivered</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">SalesOrderStatus</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Status of Sales order</span></td>
  </tr>
  <tr>
    <td class="tg-w43o"><span style="font-weight:bold;color:#212529;background-color:#FFF">SalesItemStatus</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Varchar</span></td>
    <td class="tg-jx9g"><span style="font-weight:normal;color:#212529">Status of each line item on the sales order</span></td>
  </tr>
</tbody></table>

## Load Data

The data available in a CSV file was read into and loaded in RStudio. Below is a snapshot of the file. The base file had 33,818 observations and 17 variables in the data.

```{r, eval = FALSE}
library(tidyverse)
library(knitr)
SaleData <- read_csv('/Users/ss/Documents/HR Misc/Masters/IDC6940 Capstone in Data Science/Data/DataSet1.csv') 

kable(head(SaleData))
```
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-2b7s{text-align:right;vertical-align:bottom}
.tg .tg-qag3{background-color:#A4C2F4;font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-z5rg{color:#B0B0B0;font-style:italic;text-align:left;vertical-align:bottom}
.tg .tg-7zrl{text-align:left;vertical-align:bottom}
</style>
<table class="tg"><thead>
  <tr>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">OPCO</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">SalesOrderID</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">CustomerPO</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">Product</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">Description</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">Substrate</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">RequestedDeliveryDate</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">DateFulfilled</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">qtyOrdered</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">QuantityFulfilled</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">UnitPrice</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">TotalPrice</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">Class</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">ShipToName</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">ShipToAddress</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">SalesOrderStatus</span></th>
    <th class="tg-qag3"><span style="font-weight:bold;background-color:#A4C2F4">SalesItemStatus</span></th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">.Berl Company - Orlando - Millenia</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">9969-2</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">WS-INDSC-02</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Wings .75" Label Sweet DineLink 500/rl</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">paper</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10/13/22</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10/13/2022</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">122</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">122</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">2.5</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">305</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Click &amp; Chew</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">.Berl Company - Orlando</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Michael B 4700 Millenia BLVD Suite 405, Orlando, FL</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">.Berl Company - Orlando - Millenia</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">9969-2</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">WS-INDHG-02</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Wings .75" Label Honey Garlic 500/rl</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">paper</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10/13/22</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10/13/2022</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">66</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">66</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">2.5</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">165</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Click &amp; Chew</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">.Berl Company - Orlando</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Michael B 4700 Millenia BLVD Suite 405, Orlando, FL</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">.Berl Company - Orlando - Millenia</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">9969-2</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Subtotal</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10/13/22</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10/13/2022</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">0</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1105</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Click &amp; Chew</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">.Berl Company - Orlando</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Michael B 4700 Millenia BLVD Suite 405, Orlando, FL</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">.Bird Boss - Disney Springs</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">8341</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">CG-SW-02 4M</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Bird Boss Sandwich Wrap 13x13</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">paper</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">4/13/22</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">4/19/2022</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">3</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">3</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">84</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">252</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Berl Company</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">.Bird Boss - Disney Springs</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">1506 East Buena Vista Dr, Orlando, FL</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">.Bird Boss - Disney Springs</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">8341</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Shipping Charge</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Shipping Charge</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">other</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">4/13/22</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">4/19/2022</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">43.69</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">43.69</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Berl Company</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">.Bird Boss - Disney Springs</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">1506 East Buena Vista Dr, Orlando, FL</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">.Bird Boss - Lake Buena Vista</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">10691</span></td>
    <td class="tg-z5rg"><span style="font-weight:normal;font-style:italic;color:#B0B0B0">NA</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">CG-CBX-01</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Bird Boss Catering Box 2 Sauce Holders each side 40/bundle</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">cardboard</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">2/1/23</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1/31/2023</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">2</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">2</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">79.6</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">159.2</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Bird Boss</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">.Bird Boss - Lake Buena Vista</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">1506 E. Buena Drive Suite A, Lake Buena Vista, FL</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
    <td class="tg-7zrl"><span style="font-weight:normal">Fulfilled</span></td>
  </tr>
</tbody></table>


Below you will find visualizations of some of the key data features used in this research paper. The distributions helped uncover negative values, outliers and aided with data processing.

```{r}
library(tidyverse)
library(ggplot2)
SaleData <- read_csv('/Users/ss/Documents/HR Misc/Masters/IDC6940 Capstone in Data Science/Data/DataSet1.csv') 

# 1: Create a histogram of totalprice across sales orders
ggplot(SaleData, aes(x = TotalPrice)) +
  geom_histogram(binwidth = 1000, fill = "lightblue", color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Total Prices", x = "Total Price", y = "Frequency")
#summary(SaleData$TotalPrice)

# 2: Create a histogram of quantity across sales orders
ggplot(SaleData, aes(x = qtyOrdered)) +
  geom_histogram(binwidth = 400, fill = "gray", color = "black") +
  theme_minimal() +
  labs(title = "Distribution of Quantity Ordered", x = "Quantity", y = "Frequency")
#summary(SaleData$qtyOrdered)

library(scales)
# 3: Create a pie chart for TotalSales by Substrate
substrate_sales <- SaleData %>%
  group_by(Substrate) %>%
  summarise(TotalSubstrateSales = sum(TotalPrice, na.rm = TRUE)) %>%
  arrange(desc(TotalSubstrateSales)) 

# configure sales to currency
substrate_sales$legend_label <- paste(substrate_sales$Substrate, "-", dollar(substrate_sales$TotalSubstrateSales))

ggplot(substrate_sales, aes(x = "", y = TotalSubstrateSales, fill = legend_label)) +
  geom_bar(stat = "identity", width = 1) +  # Create bar chart
  coord_polar("y") +  # Convert bar chart to pie chart
  labs(title = "Total Sales by Substrate", fill = "Substrate and Sales") +  
  theme_void()  # Remove axis labels and background
```
The visualizations were helpful in realizing what data processing was needed and what our target data should be. Below are the findings:

  A. Not only is `TotalPrice` heavily skewed left but there are negative values that will corrupt our analysis. [Min:-72000, Max:143084]
  
  B. The `qtyOrdered` is skewed left with majority values below 60. [Min:1, Max:23160]
  
  C. There are missing `Substrate` values (N/A and Other) in the amount of $2,888,731 


## Preprocessing of Data

The dataset consisted of sales returns and credits to the customer. These were excluded in order to avoid false outcomes and predictions. There were also records related to shipping costs that were excluded. As an example, there may have been out of the norm activity when SSI encountered inbound shipment delays and SSI needed to airfreight product to customers at a higher than normal shipping rate. We do not want skewed results and hence, this activity was omitted.

Below are some visualizations that show performance by Product, Price and Total Sales for SSI. 

```{r}
# Load necessary libraries
library(tidyverse)
library(dplyr)
library(ggplot2)
library(knitr)

#Load data
SaleData <- read_csv('/Users/ss/Documents/HR Misc/Masters/IDC6940 Capstone in Data Science/Data/DataSet1.csv')

# List of products to exclude
exclude_products <- c("OUTBOUND SHIPPING", "Outbound Shipping", "Shipping Charge", "SHIPPING CHARGE")  

# Filter out returns/credits (Price <= 0) and shipping charges
SaleData1 <- SaleData %>%
  filter(UnitPrice > 0, TotalPrice > 0, !Product %in% exclude_products)

# 1: Bar chart: Top 20 Products by Qty Ordered
product_qty <- SaleData1 %>%
  group_by(Product) %>%
  summarise(TotalQuantityOrdered = sum(qtyOrdered, na.rm = TRUE)) %>%
  arrange(desc(TotalQuantityOrdered)) %>%
  head(20)

ggplot(product_qty, aes(x = reorder(Product, TotalQuantityOrdered), y = TotalQuantityOrdered)) +
  geom_bar(stat = "identity", fill = "cornflowerblue") +
  theme_minimal() +
  coord_flip() +
  labs(title = "Top 20 Products by Total Quantity Ordered", x = "Product", y = "Total Quantity Ordered")+
  theme(
    plot.background = element_rect(color = "black", fill = NA, size = 1)  # Adds a black border around the plot area
  )
```
```{r}
# Create a treemap of total sales by product
library(treemap)

product_sales <- SaleData1 %>%
  filter(!Product %in% exclude_products) %>%
  group_by(Product) %>%
  summarise(pSales = sum(TotalPrice, na.rm = TRUE)) %>%
  arrange(desc(pSales)) %>%
  head(20)

# Create a treemap of total sales by product
treemap(product_sales,
        index = "Product",
        vSize = "pSales",
        title = "Treemap of Highest Sales by Product",
        palette = "Pastel1") # "PuBu"
```

```{r}
# Create heatmap - Top distributors by Orders
top_dist <- SaleData1 %>%
  group_by(OPCO) %>%
  summarise(Order_Count = n_distinct(SalesOrderID)) %>%
  arrange(desc(Order_Count)) %>%
  head(20)

ggplot(top_dist, aes(x = "", y = OPCO, fill = Order_Count)) +
  geom_tile() +
  scale_fill_gradient(low = "white", high = "darkblue") +
  labs(title = "Heatmap of Top Distributors by Number of Orders", y = "Distributors") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```
And lastly, SSI's sales shown over time in the line plot below.

```{r}
# Sales Over Time
library(lubridate)
library(scales)

# Convert DateFulfilled in date format
### SaleData1$DateFulfilled <- ymd(SaleData1$DateFulfilled) ### Did not work
SaleData1$parsed_dates <- parse_date_time(SaleData1$DateFulfilled, orders = c("ymd", "mdy", "dmy", "Ymd", "Y-m-d"))
SaleData1$parsed_dates <- ymd(SaleData1$parsed_dates)

# Summarize total sales by quarter
sales_over_time <- SaleData1 %>%
  mutate(nDate = floor_date(parsed_dates, "quarter")) %>%
  group_by(nDate) %>%
  summarize(TotalSales = sum(TotalPrice, na.rm = TRUE))

# Create a new variable for quarters
sales_over_time$Quarter <- quarter(sales_over_time$nDate)

# Plot total sales over time with quarterly labels
ggplot(sales_over_time, aes(x = nDate, y = TotalSales)) +
  geom_line(color = "blue") +
  geom_point() +
  scale_x_date(date_labels = "Q%q %Y", date_breaks = "3 months") +
  labs(title = "Total Sales Over Time (Quarterly)", x = "Quarter", y = "Total Sales") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```


Below you will find **Table 1** with some statistics summaries of the data.  


<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:4px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:4px 5px;word-break:normal;}
.tg .tg-bobw{font-weight:bold;text-align:center;vertical-align:bottom}
.tg .tg-s816{background-color:#fffc9e;font-weight:bold;text-align:center;vertical-align:bottom}
.tg .tg-7zrl{text-align:left;vertical-align:bottom}
.tg .tg-ih5g{background-color:#96fffb;font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-8d8j{text-align:center;vertical-align:bottom}
</style>
<table class="tg"><thead>
  <tr>
    <th class="tg-7zrl" rowspan="2"></th>
    <th class="tg-s816"><span style="font-weight:bold">Total Orders</span></th>
    <th class="tg-s816"><span style="font-weight:bold">Closed Short</span></th>
    <th class="tg-s816"><span style="font-weight:bold">Fulfilled</span></th>
  </tr>
  <tr>
    <th class="tg-s816"><span style="font-weight:bold">(n=7585)</span></th>
    <th class="tg-s816"><span style="font-weight:bold">(n=733)</span></th>
    <th class="tg-s816"><span style="font-weight:bold">(n=6852)</span></th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Top Customers</span></td>
    <td class="tg-7zrl"></td>
    <td class="tg-7zrl"></td>
    <td class="tg-7zrl"></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">Smoothie Island</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">1701 (22.43%)</span></td>
    <td class="tg-8d8j">455 (62.07%)</td>
    <td class="tg-8d8j">1246 (18.18%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">Philly Bite</td>
    <td class="tg-8d8j">1556 (20.51%)</td>
    <td class="tg-8d8j">267 (36.43%)</td>
    <td class="tg-8d8j">1289 (18.81%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">PlatePioneers</td>
    <td class="tg-8d8j">1396 (18.40%)</td>
    <td class="tg-8d8j">143 (19.51%)</td>
    <td class="tg-8d8j">1253 (18.29%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">Berl Company</td>
    <td class="tg-8d8j">906 (11.94%)</td>
    <td class="tg-8d8j">5 (0.68%)</td>
    <td class="tg-8d8j">901 (13.15%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">DineLink Intl</td>
    <td class="tg-8d8j">589 (7.77%)</td>
    <td class="tg-8d8j">42 (5.73%)</td>
    <td class="tg-8d8j">547 (7.98%)</td>
  </tr>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Top Products</span></td>
    <td class="tg-7zrl"></td>
    <td class="tg-7zrl"></td>
    <td class="tg-7zrl"></td>
  </tr>
  <tr>
    <td class="tg-7zrl">DC-01</td>
    <td class="tg-8d8j">1135 (14.96%)</td>
    <td class="tg-8d8j">345 (47.07%)</td>
    <td class="tg-8d8j">790 (11.53%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">TSC-PQB-01</td>
    <td class="tg-8d8j">1087 (14.33%)</td>
    <td class="tg-8d8j">389 (53.07%)</td>
    <td class="tg-8d8j">698 (10.19%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">TSC-PW14X16-01</td>
    <td class="tg-8d8j">848 (11.18%)</td>
    <td class="tg-8d8j">283 (38.61%)</td>
    <td class="tg-8d8j">565 (8.25%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">CMI-PCK-01</td>
    <td class="tg-8d8j">802 (10.57%)</td>
    <td class="tg-8d8j">288 (39.29%)</td>
    <td class="tg-8d8j">514 (7.50%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">PC-05-B1</td>
    <td class="tg-8d8j">745 (9.82%)</td>
    <td class="tg-8d8j">220 (30.01%)</td>
    <td class="tg-8d8j">525 (7.66%)</td>
  </tr>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Top Distributors</span></td>
    <td class="tg-7zrl"></td>
    <td class="tg-7zrl"></td>
    <td class="tg-7zrl"></td>
  </tr>
  <tr>
    <td class="tg-7zrl">Ed Don &amp; Company - Miramar</td>
    <td class="tg-8d8j">210 (2.77%)</td>
    <td class="tg-8d8j">0 (0.00%)</td>
    <td class="tg-8d8j">210 (3.06%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">PFG- Gainesville</td>
    <td class="tg-8d8j">197 (2.60%)</td>
    <td class="tg-8d8j">0 (0.00%)</td>
    <td class="tg-8d8j">197 (2.88%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">Ed Don &amp; Company - Woodridge</td>
    <td class="tg-8d8j">186 (2.45%)</td>
    <td class="tg-8d8j">0 (0.00%)</td>
    <td class="tg-8d8j">186 (2.71%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">Ed Don &amp; Company - Mira Loma</td>
    <td class="tg-8d8j">180 (2.37%)</td>
    <td class="tg-8d8j">0 (0.00%)</td>
    <td class="tg-8d8j">180 (2.63%)</td>
  </tr>
  <tr>
    <td class="tg-7zrl">.Ed Don - Miramar</td>
    <td class="tg-8d8j">162 (2.14%)</td>
    <td class="tg-8d8j">0 (0.00%)</td>
    <td class="tg-8d8j">162 (2.36%)</td>
  </tr>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Top Substrates</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Paper</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Plastic</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Bagasse</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl">Revenue($103,826,286)</td>
    <td class="tg-8d8j">$54,838,585 (52.82%)</td>
    <td class="tg-8d8j">$40,336,669 (38.85%)</td>
    <td class="tg-8d8j">$4,350,337 (4.19%)</td>
  </tr>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Quantity Ordered</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Min</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Mean</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Max</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl">Total Ordered(1,971,237)</td>
    <td class="tg-8d8j">1</td>
    <td class="tg-8d8j">61.47</td>
    <td class="tg-8d8j">23,160</td>
  </tr>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Unit Price</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Min</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Mean</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Max</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl">Key Stats</td>
    <td class="tg-8d8j">$0.16 </td>
    <td class="tg-8d8j">$62.60 </td>
    <td class="tg-8d8j">$864.00</td>
  </tr>
  <tr>
    <td class="tg-ih5g"><span style="font-weight:bold">Total Price</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Min</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Mean</span></td>
    <td class="tg-bobw"><span style="font-weight:bold">Max</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl">Key Stats</td>
    <td class="tg-8d8j">$4.92 </td>
    <td class="tg-8d8j">$3,430.74 </td>
    <td class="tg-8d8j">$143,084.74</td>
  </tr>
</tbody></table>

#### Table 2 identifies factors impacting consumer behavior

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-6bug{background-color:#dae8fc;font-weight:bold;text-align:center;vertical-align:middle}
.tg .tg-xpud{background-color:#ffffc7;font-weight:bold;text-align:center;vertical-align:bottom}
.tg .tg-j6zm{font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-7zrl{text-align:left;vertical-align:bottom}
.tg .tg-nrix{text-align:center;vertical-align:middle}
</style>
<table class="tg" style="undefined;table-layout: fixed; width: 743px"><colgroup>
<col style="width: 63px">
<col style="width: 134px">
<col style="width: 201px">
<col style="width: 179px">
<col style="width: 166px">
</colgroup>
<thead>
  <tr>
    <th class="tg-j6zm"><span style="font-weight:bold">Table 2:</span></th>
    <th class="tg-j6zm" colspan="4"><span style="font-weight:bold">Identified Factors having causal impact on consumer buying behavior</span></th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-7zrl" rowspan="7"></td>
    <td class="tg-7zrl"></td>
    <td class="tg-xpud">Demographics</td>
    <td class="tg-xpud">Behavioral</td>
    <td class="tg-xpud">Seasonal</td>
  </tr>
  <tr>
    <td class="tg-6bug" rowspan="6">Factors<br><br></td>
    <td class="tg-nrix" rowspan="6">Geography<br><br><br></td>
    <td class="tg-nrix" rowspan="3">Product</td>
    <td class="tg-nrix" rowspan="2">Quantity</td>
  </tr>
  <tr>
  </tr>
  <tr>
    <td class="tg-nrix" rowspan="2">Total Price</td>
  </tr>
  <tr>
    <td class="tg-nrix" rowspan="3">Substrate</td>
  </tr>
  <tr>
    <td class="tg-nrix" rowspan="2">Date</td>
  </tr>
  <tr>
  </tr>
</tbody>
</table>

### Analysis and Results

Initially, a preliminary Random Forest model was run to predict `TotalPrice` (regression). TotalPrice being the target variable and OPCO, Product, Substrate, RequestedDeliveryDate, qtyOrdered, UnitPrice and Class being the predictor variables. Two iterations were run; one with 100 trees and one with 300 trees. Model 2 relied more heavily on qtyOrdered and UnitPrice for accurate predictions, and it better incorporated factors like Product, Substrate, and RequestedDeliveryDate to refine predictions as compared to Model 1. Looking at the prediction plots for both model 1 and 2, it appeared the points were very close to or overlapping along the diagonal line which indicated that the model is making accurate predictions. There didn't appear to be a significant difference between the two models.

```{r, eval = FALSE}
# Split the data into training and testing sets
set.seed(6079)
trainIndex <- createDataPartition(SaleData1$TotalPrice, p = 0.8, list = FALSE, times = 1)
trainData <- SaleData1[trainIndex, ]
testData  <- SaleData1[-trainIndex, ]

# *Model 1* - Fit a Random Forest model to predict TotalPrice (regression)
rf_model1 <- randomForest(TotalPrice ~ OPCO + Product + Substrate + RequestedDeliveryDate + qtyOrdered +
                            UnitPrice + Class, 
                            data = trainData, 
                            ntree = 100,  # Number of trees (default is 500)
                            mtry = 3,
                            importance = TRUE, 
                            proximity = TRUE,
                            na.action = na.exclude) # call to handle missing values

```

```{r, eval = FALSE}
# *Model 2* - Fit a Random Forest model to predict TotalPrice (regression)
rf_model2 <- randomForest(TotalPrice ~ OPCO + Product + Substrate + RequestedDeliveryDate + qtyOrdered +
                          UnitPrice + Class, 
                          data = trainData, 
                          ntree = 300,  # Number of trees (default is 500)
                          mtry = 3,
                          importance = TRUE, 
                          proximity = TRUE,
                          na.action = na.exclude) # call to handle missing values
```
#### Table 3 - Feature Importance 

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-qfkm{border-color:#ffc702;text-align:left;vertical-align:bottom}
.tg .tg-8sni{border-color:#333333;text-align:center;vertical-align:bottom}
.tg .tg-bw5j{background-color:#ffffc7;border-color:#ffc702;text-align:center;vertical-align:middle}
.tg .tg-60cv{border-color:#333333;font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-558x{border-color:#ffc702;font-size:14px;font-weight:bold;text-align:center;vertical-align:top}
.tg .tg-4gw0{border-color:#333333;text-align:left;vertical-align:bottom}
.tg .tg-u572{background-color:#dae8fc;border-color:#ffc702;text-align:center;vertical-align:top}
</style>
<table class="tg" style="undefined;table-layout: fixed; width: 662px"><colgroup>
<col style="width: 159px">
<col style="width: 187px">
<col style="width: 159px">
<col style="width: 157px">
</colgroup>
<thead>
  <tr>
    <th class="tg-60cv"><span style="font-weight:bold">Table3:</span></th>
    <th class="tg-558x" colspan="3">Feature Importance impacting TotalPrice </th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-4gw0"></td>
    <td class="tg-u572">Percent Increace in Mean Squared Error</td>
    <td class="tg-qfkm"></td>
    <td class="tg-bw5j">Increase in Node Purity</td>
  </tr>
  <tr>
    <td class="tg-4gw0">qtyOrdered</td>
    <td class="tg-8sni">115.57</td>
    <td class="tg-4gw0">qtyOrdered</td>
    <td class="tg-8sni">816,625,361,100</td>
  </tr>
  <tr>
    <td class="tg-4gw0">UnitPrice</td>
    <td class="tg-8sni">67.47</td>
    <td class="tg-4gw0">UnitPrice</td>
    <td class="tg-8sni">108,382,696,050</td>
  </tr>
  <tr>
    <td class="tg-4gw0">Product</td>
    <td class="tg-8sni">18.24</td>
    <td class="tg-4gw0">Product</td>
    <td class="tg-8sni">48,552,700,247</td>
  </tr>
  <tr>
    <td class="tg-4gw0">Substrate</td>
    <td class="tg-8sni">13.31</td>
    <td class="tg-4gw0">Class</td>
    <td class="tg-8sni">43,912,472,740</td>
  </tr>
  <tr>
    <td class="tg-4gw0">RequestedDeliveryDate</td>
    <td class="tg-8sni">11.35</td>
    <td class="tg-4gw0">OPCO</td>
    <td class="tg-8sni">31,973,554,486</td>
  </tr>
  <tr>
    <td class="tg-4gw0">OPCO</td>
    <td class="tg-8sni">10.72</td>
    <td class="tg-4gw0">RequestedDeliveryDate</td>
    <td class="tg-8sni">11,687,570,783</td>
  </tr>
  <tr>
    <td class="tg-4gw0">Class</td>
    <td class="tg-8sni">10.42</td>
    <td class="tg-4gw0">Substrate</td>
    <td class="tg-8sni">7,523,464,034</td>
  </tr>
</tbody></table>

```{r, eval = FALSE}
# Get importance of each feature
importance(rf_model1)
importance(rf_model2)

# Get OOB error estimate
print(rf_model1)
print(rf_model2)

# Proximity Matrix
proximity_matrix <- rf_model1$proximity
proximity_matrix2 <- rf_model2$proximity

# Predict TotalPrice on new data
predictions1 <- predict(rf_model1, newdata = testData)
predictions2 <- predict(rf_model2, newdata = testData)

# Calculate residuals - model 1
residuals1 <- testData$TotalPrice - predictions1  # print(residuals1)

# Calculate residuals - model 1
residuals2 <- testData$TotalPrice - predictions2. # print(residuals1)

# Calculate MSE and RMSE - model 1
mse1 <- mean(residuals1^2)
rmse1 <- sqrt(mse1)

# Calculate MSE and RMSE - model 2
mse2 <- mean(residuals2^2)
rmse2 <- sqrt(mse2)

```
The Root Mean Squared Error (RMSE) in Model 1 was 1791.60, which meant that on average, Model 1 predictions of TotalPrice are off by about 1,791.60 dollars. Very close to that, the RMSE in Model 2 was 1763.69, which meant that on average, Model 2 predictions of TotalPrice are off by about 1,763.69 dollars. Considering the mean TotalPrice was around 3400 dollars, we have a very high prediction error. My conclusion was that I must handle the outliers and rerun the models.

Subsequently, two main models were run: one to predict <u>`Customer Churn`</u> and one to predict <u>`Demand Planning`.</u> 

**Customer Churn**: A Random Forest Classification model was created to predict *Customer Churn* using some of the features from the SSI Sales dataset. Predicting churn is crucial because it allows organizations to proactively engage customers who may leave, improving retention and reducing revenue loss. A churn indicator was not available in the historical SSI Sales data, therefore, it was defined and appended to the dataset. If the last order date for a Client was older than 2 months, a churn indicator of 1 was selected and if order date was within the prior 2 months, a churn indicator of 0 was selected [churn (1) and no-churn (0)]. Churn was based on purchase frequency; assuming clients typically order monthly, clients were flagged in case an order had not been placed in more than two months. In that case, the client was considered churned.

```{r, eval = FALSE}
# Since we don't have a variable for churn, Define churn based on purchase frequency
## Convert DateFulfilled from character string to Date type format
SaleData1$DateFulfilled <- as.Date(SaleData1$DateFulfilled, format = "%m/%d/%Y")

## Find last fulfilled date for each client
client_last_order <- SaleData1 %>%
  group_by(Class)  %>%
  summarize(LastOrderDate = max(DateFulfilled, na.rm = TRUE))

# Define the cutoff date for churn (2 months before the end of the dataset)
cutoff_date <- as.Date("2024-09-17") - months(2)

# Add churn indicator based on the cutoff date
client_last_order <- client_last_order %>%
  mutate(churned = ifelse(LastOrderDate < cutoff_date, 1, 0))

# Add churn indicator to original dataset
SaleData1 <- SaleData1 %>%
  left_join(client_last_order, by = "Class")
```

The `churn` variable was modeled using the randomForest() function in R. The model was trained to predict churn based on the following predictors:

  **•	Class:** The Client affected on the sale.
  
  **•	Product:** The Product being sold.
  
  **•	qtyOrdered:** Quantity ordered on the sale.
  
  **•	DateFulfilled:** Date the sale was completed.

```{r, eval = FALSE}
# Define target variable
SaleData1$churned <- as.factor(SaleData1$churned) # Ensure churn is a factor

# Partition the data into training and testing sets
set.seed(135) # For reproducibility
trainIndex <- createDataPartition(SaleData1$churned, p = 0.8, list = FALSE)
trainData <- SaleData1[trainIndex, ]
testData <- SaleData1[-trainIndex, ]

# Train the Random Forest model
rf_model <- randomForest(churned ~ Product + DateFulfilled +
                         qtyOrdered + Class, 
                         data = trainData, 
                         ntree = 300, # Number of trees
                         mtry = 3, # Number of variables tried at each split
                         importance = TRUE)

```
The model was created using tree size of 300 (ntree = 300). The model was trained to predict churn based on the following independent variables (predictors): *Product, Quantity Ordered, DateFulfilled and Class*. Feature importance and proximity measure were set within the model for further analysis. The createDataPartition() function in R was used to split the data into training and test sets based on target variable `churned` and it's distribution was maintained between the two sets. 80% of the data was used to train data and 20% was used to test. The training set was used to train the random forest model and helped it learn the relationships between the predictors and the target variable. The testing set was used to evaluate the model's performance. The number of variables were randomly sampled at each split (mtry = 3) using the default value of 3.

```{r, eval = FALSE}
# Review the model output
print(rf_model)

# Make predictions on the test set
predictions <- predict(rf_model, newdata = testData)

# Create a confusion matrix
confusion_matrix <- confusionMatrix(predictions, testData$churned)
print(confusion_matrix)

# Plot variable importance
varImpPlot(rf_model, main = "Feature Importance for Churn Prediction")

```
#### Table 4 - Confusion Matrix (Customer Churn Model)

The confusion matrix provides metrics such as accuracy, sensitivity, and specificity, which are key for interpreting model performance in predicting churn.

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:2px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:2px 5px;word-break:normal;}
.tg .tg-2b7s{text-align:right;vertical-align:bottom}
.tg .tg-ccro{background-color:#ffffc7;text-align:center;vertical-align:bottom}
.tg .tg-dne1{background-color:#c0c0c0;text-align:left;vertical-align:bottom}
.tg .tg-04ql{background-color:#9b9b9b;text-align:left;vertical-align:bottom}
.tg .tg-j6zm{font-weight:bold;text-align:left;vertical-align:bottom}
.tg .tg-7zrl{text-align:left;vertical-align:bottom}
.tg .tg-qcp4{background-color:#ffccc9;text-align:left;vertical-align:bottom}
</style>
<table class="tg"><thead>
  <tr>
    <th class="tg-j6zm"><span style="font-weight:bold">Table4:</span></th>
    <th class="tg-j6zm" colspan="2"><span style="font-weight:bold">Confusion Matrix and Statistics</span></th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-04ql" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-7zrl"></td>
    <td class="tg-ccro" colspan="2">Reference</td>
  </tr>
  <tr>
    <td class="tg-qcp4"><span style="font-weight:normal">Prediction </span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">0</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s"><span style="font-weight:normal">0</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">4045</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">135</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s"><span style="font-weight:normal">1</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1101</span></td>
    <td class="tg-2b7s"><span style="font-weight:normal">1001</span></td>
  </tr>
  <tr>
    <td class="tg-dne1" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Accuracy</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.8032</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">95% CI</td>
    <td class="tg-2b7s">(0.7932, 0.813)</td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">No Information Rate</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.8192</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">P-Value [Acc &gt; NIR]</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.9994</span></td>
  </tr>
  <tr>
    <td class="tg-dne1" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Kappa</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.5012</span></td>
  </tr>
  <tr>
    <td class="tg-dne1" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Mcnemar's Test P-Value</td>
    <td class="tg-2b7s">&lt;2e-16</td>
  </tr>
  <tr>
    <td class="tg-dne1" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Sensitivity</td>
    <td class="tg-2b7s">0.786</td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Specificity</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.8812</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Pos Pred Value</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.9677</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Neg Pred Value</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.4762</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Prevalence</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.8192</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Detection Rate</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.6439</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Detection Prevalence</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.6654</span></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2">Balanced Accuracy</td>
    <td class="tg-2b7s"><span style="font-weight:normal">0.8336</span></td>
  </tr>
  <tr>
    <td class="tg-dne1" colspan="3"></td>
  </tr>
  <tr>
    <td class="tg-2b7s" colspan="2"><span style="font-weight:normal">'Positive' Class</span></td>
    <td class="tg-2b7s">0</td>
  </tr>
</tbody></table>

##### Customer Churn Model Evaluation

The Model was evaluated using the statistics provided in the confusion matrix. The accuracy on the final model proved to be 80.3% but it was achieved only after several tweaks to the model for example correcting the date format and re-grouping. Originally only a 51% accuracy was seen which meant the model correctly classified about 51% of the cases. However, 80.3% accuracy was eventually achieved to predict churn. The No Information Rate (NIR) was 0.8192, which meant that always predicting majority class (0) would result in 81.92% accuracy. Kappa of 0.5012 indicates moderate agreement between predicted and actual classifications beyond chance, hence did fairly in differenciating classes. Sensitivity (for class 0) of 0.7860 indicated the model correctly identifies 78.6% of the actual 0 cases. This was fairly strong but could still benefit from improvement.
Specificity (for class 1) of 0.8812 suggests the model correctly identifies 88.12% of the actual 1 cases, indicating strong performance in identifying class 1 cases. Positive Predictive Value (PPV for class 0) of 0.9677 suggests that when the model predicts 0, it is correct 96.77% of the time. This indicates a high precision for class 0. Negative Predictive Value (NPV for class 1) of 0.4762, suggests that when the model predicts 1, it’s correct only 47.62% of the time. This lower NPV suggests that the model might still be missing some 1 cases. The P-value (<2e-16) for Mcnemar’s Test indicates a statistically significant difference between the error rates for 0 and 1 predictions. This could mean that the model still struggles slightly with misclassification between classes. Over all, the model has a good balance (0.8336) between identifying both classes, though it is better at predicting class 0. 

**Inventory Forecast**: A Random Forest Regression model was created to forecast inventory using some of the features from the SSI Sales dataset. The goal of *Inventory Forecast* was to predict quantity that will be ordered for each product in future periods. `qtyOrdered` was the target variable with predictor variables being: `Product, OPCO, Substrate, Month, Year, DayOfWeek, UnitPrice and Class`. Certain Classes were omitted from the data that were irrelevant as well as records with missing substrate. Additional variables were calculated to pass to the model such as day, week and month of the year. The data was partitioned as prior: 80% of the data was used to train the model and 20% was used to test. Feature importance and proximity measure were set within the model for further analysis and the model was evaluated using the root mean square error rate.

```{r}
# Preprocess Data
# Load necessary libraries
library(randomForest)
library(dplyr)
library(tidyverse)
library(knitr)
SaleData <- read_csv('/Users/ss/Documents/HR Misc/Masters/IDC6940 Capstone in Data Science/Data/DataSet2.csv') 

# List of Classes not relevant 
exclude_class <- c("None", "WarehouseG", "WarehouseJ", "WarehouseS", "Prospective", "Click & Chew", "Sporteux")
# List of records to exclude for shipping
exclude_products <- c("OUTBOUND SHIPPING", "Outbound Shipping", "Shipping Charge", "SHIPPING CHARGE") 

# Filter out returns/credits (Price <= 0) and Classes not relevant and Products not relevant #qtyOrdered > 9, 
SaleData1 <- SaleData %>%
  filter(UnitPrice > 0, TotalPrice > 0, !Product %in% exclude_products, !Class %in% exclude_class)

# Convert date columns to Date type
SaleData1$RequestedDeliveryDate <- as.Date(SaleData1$RequestedDeliveryDate, format="%m/%d/%Y")

# Look for missing values
# colSums(is.na(SaleData1))

# Remove rows with missing values # 465
SaleData1 <- SaleData1 %>% drop_na(Substrate) 
SaleData1 <- SaleData1 %>% drop_na(RequestedDeliveryDate) 

# Handle missing values (e.g., using mean or median imputation)
# SaleData1 <- SaleData1 %>%
#   mutate_if(is.numeric, ~ifelse(is.na(.), mean(., na.rm = TRUE), .))

# Add additional features to aid in demand predicton
# Add date-related features
SaleData1 <- SaleData1 %>%
  mutate(Month = as.numeric(format(RequestedDeliveryDate, "%m")),
         Year = as.numeric(format(RequestedDeliveryDate, "%Y")),
         DayOfWeek = as.numeric(format(RequestedDeliveryDate, "%u"))) # Weekday (1-7)
```

```{r}
library(caret)
# Split data 
set.seed(960)
trainIndex <- createDataPartition(SaleData1$qtyOrdered, p = 0.8, list = FALSE)
trainData <- SaleData1[trainIndex, ]
testData <- SaleData1[-trainIndex, ]

# Train the random forest model to predict qtyOrdered
rf_inventory <- randomForest(qtyOrdered ~ Product + OPCO + Substrate + Month + Year +
                             DayOfWeek + UnitPrice + Class,
                             data = trainData,
                             ntree = 100,
                             mtry = 3,
                             importance = TRUE,
                             na.action = na.exclude)
```
```{r, eval = FALSE}
# Evaluate the model on test data using Mean Squared Error (MSE) and Root Mean Squared Error 
# (RMSE) to understand how well it predicts future demand.
predictions <- predict(rf_inventory, newdata = testData)
# Review the model output
any(is.na(predictions)) # TRUE
sum(is.na(predictions)) # 1

# Calculate residuals
residuals <- testData$qtyOrdered - predictions

# Calculate RMSE
rmse <- sqrt(mean(residuals^2))
print(paste("RMSE:", rmse))

# Interpret Feature Importance
# Identify which features most influence the model’s demand predictions. This can help in inventory 
# decision-making by highlighting factors that impact demand, like seasonal trends or specific products
importance(rf_inventory)
```

```{r Feature Importance Plot}
library(randomForest)
library(dplyr)
library(tidyverse)
library(knitr)

# Plot feature importance
varImpPlot(rf_inventory)
```

#### Inventory Forecast Model Evaluation

On the initial model, a RMSE (Root Mean Square Error) of 115.01 was calculated. That meant that on average, the predicted quantity deviated from the actual quantity by about 115. With the target variable `qtyOrdered` ranging from 1 to 1262, it was a clear indication of some degree of prediction error. The RMSE suggested room for improvement in the model. Many model modifications were made to improve RMSE, however an improvement in prediction was not achieved. Three further strategies were tested to improve the model. 

 - *Aggregating features*: A grouping by `Product` and `Class` was created to capture patterns specific to each product for each client. This grouping provided more granular values and improved the model's performance. RMSE calculated dropped to 100.73.
 
 - *K-Fold Cross-Validation*: Further tuning was performed using 5-Fold Cross-Validation to get more robust RMSE estimate. The final value used for the model was mtry = 4 and RMSE calculated was 94.38.
 
 - *XGBoost*: XGBoost package in R proved to capture complex patterns of this data better than the base Random Forest function. XGBoost required data to be in a numeric matrix format and it didn't handle categorical variables directly. A RMSE of 62.88 was achieved using this gradient boosting method. 62.88 indicates that there is some variability but still reasonable predictive accuracy for larger quantities. However, it still appears to be high since the data has a lot of lower values.

The results are displayed in *Table 5* below for refrence.

#### Table 5 - Model Comparison with RMSE

<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  overflow:hidden;padding:10px 5px;word-break:normal;}
.tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:14px;
  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}
.tg .tg-jz24{background-color:#CFE2F3;color:#00F;font-weight:bold;text-align:center;vertical-align:bottom}
.tg .tg-nozj{background-color:#CFE2F3;color:#980000;font-weight:bold;text-align:center;vertical-align:bottom}
.tg .tg-7zrl{text-align:left;vertical-align:bottom}
.tg .tg-8d8j{text-align:center;vertical-align:bottom}
</style>
<table class="tg" style="undefined;table-layout: fixed; width: 407px"><colgroup>
<col style="width: 341px">
<col style="width: 66px">
</colgroup>
<thead>
  <tr>
    <th class="tg-nozj"><span style="font-weight:bold;color:#980000;background-color:#CFE2F3">Model</span></th>
    <th class="tg-jz24"><span style="font-weight:bold;color:#00F;background-color:#CFE2F3">RMSE</span></th>
  </tr></thead>
<tbody>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">Base Random Forest Model</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">115.01</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">Random Forest with Aggregating Features</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">100.73</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">Random Forest with 5-Fold Cross Validation (mtry=2)</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">108.78</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">Random Forest with 5-Fold Cross Validation (mtry=3)</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">100.44</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">Random Forest with 5-Fold Cross Validation (mtry=4)</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">94.38</span></td>
  </tr>
  <tr>
    <td class="tg-7zrl"><span style="font-weight:normal">XGBoost</span></td>
    <td class="tg-8d8j"><span style="font-weight:normal">62.88</span></td>
  </tr>
</tbody></table>
